# autostarts

# systemd: make sure screen sharing work
set $import_env 'systemctl --user import-environment DISPLAY WAYLAND_DISPLAY SWAYSOCK'
set $update_env 'hash dbus-update-activation-environment 2>/dev/null && dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY SWAYSOCK'

set $xdg_dirs '[ -x "$(command -v xdg-user-dirs-update)" ] && exec xdg-user-dirs-update'
set $policykit '[-x "$(command -v /usr/lib/policykit-1-gnome/polkit-gnome-authentication-agent-1)"] && exec /usr/lib/policykit-1-gnome/polkit-gnome-authentication-agent-1'

## apply the keyboard layout from localectl if no keyboard layout has been set via config.d
#set $auto_xdg_keyboard 'grep -q xkb_layout ~/.config/sway/config.d/*.conf || /usr/share/sway/scripts/keyboard.sh'
#set $initialize_foot_server '[ -x "$(command -v foot)" ] && systemctl --now --user enable foot-server.socket && systemctl --now --user enable foot-server'
#set $initialize_waybar '[ -x "$(command -v waybar)" ] && systemctl --user enable --now waybar'
#set $initialize_poweralert_daemon '[ -x "$(command -v poweralertd)" ] && systemctl --now --user enable poweralertd'
#set $initialize_idlehack_daemon '[ -x "$(command -v idlehack)" ] && systemctl --now --user enable idlehack'

#set $swayidle swayidle -w \
#    timeout $locking_timeout 'swaylock --ignore-empty-password --show-failed-attempts --daemonize --show-keyboard-layout --color 000000cc' \
#    timeout $screen_timeout 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
#    #before-sleep 'playerctl pause' \
#    before-sleep 'swaylock --ignore-empty-password --show-failed-attempts --deamonize --show-keyboard-layout --color 000000cc'
#    after-resume 'swaymsg "output * dpms on"'

#set $swayidle swayidle -w \
#    timeout $idle_timeout 'brightnessctl -s && brightnessctl set 10' \
#    resume 'brightnessctl -r' \
#    timeout $locking_timeout 'exec $locking' \
#    timeout $screen_timeout '/usr/share/sway/scripts/keyboard-backlight-switch.sh off && swaymsg "output * dpms off"' \
#    resume '/usr/share/sway/scripts/keyboard-backlight-switch.sh on && swaymsg "output * dpms on"' \
#    timeout $sleep_timeout_bat '[ "$(acpi -b | grep Discharging)" != "" ] && systemctl suspend' \
#    timeout $sleep_timeout_ac '[ "$(acpi -b | grep Discharging)" = "" ] && systemctl suspend' \
#    before-sleep 'playerctl pause' \
#    before-sleep 'exec $locking & sleep $sleep_delay' \
#    after-resume '/usr/share/sway/scripts/keyboard-backlight-switch.sh on && swaymsg "output * dpms on" && brightnessctl -r'

set $swayidle swayidle -w \
	#timeout $idle_timeout 'brightnessctl -s && brightnessctl set 10' \
	#resume 'brightnessctl -r' \
	timeout $locking_timeout 'exec $locking' \
	timeout $screen_timeout 'swaymsg "output * dpms off"' \
	resume 'swaymsg "output * dpms on"' \
	#before-sleep 'playerctl pause' \
	before-sleep 'exec $locking & sleep $sleep_delay' \
	after-resume 'swaymsg "output * dpms on"'

#set $apply_background swaymsg 'output * bg $background stretch'
set $apply_background '$CONFIG_SWAY/scripts/background.sh $background_timeout'

## daemons

set $foot_server '[ -x "$(command -v foot)" ] && foot --server'
set $fcitx5 '[ -x "$(command -v fcitx5)" ] && fcitx5 -d'

#set $nm_applet '[ -x "$(command -v nm-applet)" ] && dbus-launch nm-applet --indicator'
set $nm_applet '[ -x "$(command -v nm-applet)" ] && nm-applet --indicator'

set $clipman_watch '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v clipman)" ] && wl-paste -p -t text --watch clipman store --histpath=$RUNTIME_DIR/clipman-primary.json'
set $clipman_store '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v clipman)" ] && wl-paste -t text --watch clipman store --histpath=$RUNTIME_DIR/clipman-clipboard.json'

set $mako '[ -x "$(command -v mako)" ] && pkill -x mako; $CONFIG_HOME/mako/mako-notify.sh --font "$term-font" --text-color "$text-color" --border-color "$accent-color" --background-color "$background-color"'
#set $mako '[ -x "$(command -v mako)" ] && pkill -x mako; $CONFIG_HOME/mako/mako-notify.sh'

set $calendar_daemon '[ -x "$(command -v calcurse)" ] && pkill -x calcurse && calcurse --daemon'
#set $calendar_daemon 'calcurse --daemon'

set $remmina_tray '[ -x "$(command -v remmina)" ] && remmina --icon'

#set $watch_playerctl '[ -x "$(command -v playerctl)" ] && pkill -x playerctl; playerctl -a metadata --format \"{{status}} {{title}}\" --follow | while read line; do waybar-signal playerctl; waybar-signal idle; done'

